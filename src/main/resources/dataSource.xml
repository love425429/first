<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">
        
        <!-- 配置数据源,使用proxool连接池 -->         
        <bean id="dataSource" class="org.logicalcobwebs.proxool.ExtendsProxoolDataSource">
			  <property name="driver" value="${first.jdbc.driver}"/>  
			  <property name="driverUrl" value="${first.jdbc.url}&amp;user=${first.jdbc.username}&amp;password=${first.jdbc.password}"/>
			  <property name="user" value="${first.jdbc.username}"/>  
			  <property name="password" value="${first.jdbc.password}"/>  
			  <property name="alias" value="${first.jdbc.alias}"/>
			  <!-- 
				  连接池中可用的连接数量.如果当前的连接池中的连接少于这个数值.新的连接将被建立(假设没有超过最大可用数).
				  例如.我们有3个活动连接2个可用连接,而我们的prototype-count是4,那么数据库连接池将试图建立另外2个连接.
				  这和 minimum-connection-count不同. minimum-connection-count把活动的连接也计算在内.
				  prototype-count 是spare connections 的数量. 
			  -->
			  <property name="prototypeCount" value="${first.jdbc.prototypeCount}"/> 
			  <!-- 最大的数据库连接数 --> 
			  <property name="maximumConnectionCount" value="${first.jdbc.maximumConnectionCount}"/>  
			  <!-- 最小的数据库连接数 -->
			  <property name="minimumConnectionCount" value="${first.jdbc.minimumConnectionCount}"/>
			  <!-- 一个线程的最大寿命 -->
			  <property name="maximumConnectionLifetime" value="${first.jdbc.maximumConnectionLifetime}" />  
			  <!-- 如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略。 -->
			  <property name="houseKeepingTestSql" value="${first.jdbc.houseKeepingTestSql}"/>
			  <!-- 保留线程处于睡眠状态的最长时间,house keeper 的职责就是检查各个连接的状态,并判断是否需要销毁或者创建. -->
			  <property name="houseKeepingSleepTime" value="${first.jdbc.houseKeepingSleepTime}"/> 
			  <!-- 如果housekeeper 检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程.所以确认一下你的服务器的带宽.然后定一个合适的值.默认是5分钟. --> 
			  <property name="maximumActiveTime" value="${first.jdbc.maximumActiveTime}"/>  
			  <property name="verbose" value="true"/>  
			  <!-- 如果为true,那么每个被执行的SQL语句将会在执行期被log记录(DEBUG LEVEL).你也可以注册一个ConnectionListener (参看ProxoolFacade)得到这些信息. -->
			  <property name="trace" value="true"/> 
			  <!-- 配合 autoReconnect=true 一起使用  针对连接池中坏掉的连接重新连接数据库 -->
			  <property name="testBeforeUse" value="true"/>
		</bean>         
		<!-- 配置SqlSessionFactory -->         
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">             
			<!-- 数据源 -->             
			<property name="dataSource" ref="dataSource"/>             
			<!-- 加载mybatis的全局配置文件 -->             
			<property name="configLocation" value="classpath:sqlMapConfig.xml" />     
		</bean>  
		
		<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
	    <bean id="transactionManager"  
	        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	        <property name="dataSource" ref="dataSource" />  
	    </bean>  
</beans>